# frozen_string_literal: true

# # Firezone configuration

require 'etc'

#
# Attributes here will be applied to configure the application and the services
# it uses.
#
# Most of the attributes in this file are things you will not need to ever
# touch, but they are here in case you need them.
#
# A `firezone-ctl reconfigure` should pick up any changes made here.
#
# If /etc/firezone/firezone.json exists, its attributes will be loaded
# after these, so if you have that file with the contents:
#
#     { "postgresql": { "enable": false } }
#
# for example, it will set the node['firezone']['postgresql']['enabled'] attribute to false.

# ## Top-level attributes
#
# These are used by the other items below. More app-specific top-level
# attributes are further down in this file.

# ## External URL (REQUIRED)
#
# This will be used to generate URLs for outbound emails, websocket connections
# and OAuth redirects.
# and host headers that nginx passes along. If using a custom path, scheme, or port,
# you may want to change this, e.g. http://firezone.example.com:1234/custom-root-prefix/
default['firezone']['external_url'] = "{{ config.external_url }}"

# Email for the primary admin user.
default['firezone']['admin_email'] = '{{ config.admin_email }}'

# The maximum number of devices a user can have.
# Max: 100
# Default: 10
default['firezone']['max_devices_per_user'] = {{ config.max_devices_per_user }}

# Allow users to create (and download) their own devices. Set to false
# if you only want administrators to create and manage devices.
default['firezone']['allow_unprivileged_device_management'] = {{ config.allow_unprivileged_device_management|tojson }}

# Allow users to configure the following device fields when creating a device:
# use_site_allowed_ips
# allowed_ips
# use_site_dns
# dns
# use_site_endpoint
# endpoint
# use_site_mtu
# mtu
# use_site_persistent_keepalive
# persistent_keepalive
# ipv4
# ipv6
#
# If you only want users to modify the name and description for new devices,
# disable this.
default['firezone']['allow_unprivileged_device_configuration'] = {{ config.allow_unprivileged_device_configuration|tojson }}

default['firezone']['config_directory'] = '{{ config.config_directory }}'
default['firezone']['install_directory'] = '{{ config.install_directory }}'
default['firezone']['app_directory'] = "{{ config.app_directory }}"
default['firezone']['log_directory'] = '{{ config.log_directory }}'
default['firezone']['var_directory'] = '{{ config.var_directory }}'
default['firezone']['user'] = '{{ config.user }}'
default['firezone']['group'] = '{{ config.group }}'

# The outgoing interface name.
# This is where tunneled traffic will exit the WireGuard tunnel.
# If set to nil, this is will be set to the interface for the machine's
# default route.
default['firezone']['egress_interface'] = {% if config.egress_interface != "nil" %}'{{ config.egress_interface }}'{% else %}nil{% endif %}

# Whether to use OpenSSL FIPS mode across Firezone. Default disabled.
default['firezone']['fips_enabled'] = {% if config.fips_enabled != "nil" %}'{{ config.fips_enabled }}'{% else %}nil{% endif %}

# ## Global Logging Settings
#
# Enable or disable logging. Set this to false to disable Firezone logs.
default['firezone']['logging']['enabled'] = {{ config.logging.enabled|tojson }}

# ## Enterprise
#
# The "enterprise" cookbook provides recipes and resources we can use for this
# app.

default['enterprise']['name'] = 'firezone'

# Enterprise uses install_path internally, but we use install_directory because
# it's more consistent. Alias it here so both work.
default['firezone']['install_path'] = node['firezone']['install_directory']

# An identifier used in /etc/inittab (default is 'SUP'). Needs to be a unique
# (for the file) sequence of 1-4 characters.
default['firezone']['sysvinit_id'] = 'SUP'

# ## Authentication

# These settings control authentication-related aspects of Firezone.
# For more information, see https://docs.firezone.dev/user-guides/authentication/
#
# When local email/password authentication is used, users must be created by an Administrator
# before they can sign in.
#
# When SSO authentication methods are used, users are automatically added to Firezone
# when logging in for the first time via the SSO provider.
#
# Users are uniquely identified by their email address, and may sign in via multiple providers
# if configured.

# Local email/password authentication is enabled by default
default['firezone']['authentication']['local']['enabled'] = {{ config.authentication.local.enabled|tojson }}

# Automatically create users siging in from OIDC for the first time. Disable this
# and manually create them (leaving their password blank) if you wish to only
# allow existing certain existing users to sign in.
default['firezone']['authentication']['auto_create_oidc_users'] = {{ config.authentication.auto_create_oidc_users|tojson }}

# OIDC Authentication
#
# Firezone can disable a user's VPN if there's any error detected trying
 # to refresh their access_token. This is verified to work for Google, Okta, and
 # Azure SSO and is used to automatically disconnect a user's VPN if they're removed
 # from the OIDC provider. Leave this disabled if your OIDC provider
 # has issues refreshing access tokens as it could unexpectedly interrupt a
 # user's VPN session.
default['firezone']['authentication']['disable_vpn_on_oidc_error'] = {{ config.authentication.disable_vpn_on_oidc_error|tojson }}

# Any OpenID Connect provider can be used here.
# Multiple OIDC configs can be added to the same Firezone instance.
# This is an example using Google and Okta as an SSO identity provider.
# default['firezone']['authentication']['oidc'] = {
#   google: {
#     discovery_document_uri: "https://accounts.google.com/.well-known/openid-configuration",
#     client_id: "<GOOGLE_CLIENT_ID>",
#     client_secret: "<GOOGLE_CLIENT_SECRET>",
#     redirect_uri: "https://firezone.example.com/auth/oidc/google/callback/",
#     response_type: "code",
#     scope: "openid email profile",
#     label: "Google"
#   },
#   okta: {
#     discovery_document_uri: "https://<OKTA_DOMAIN>/.well-known/openid-configuration",
#     client_id: "<OKTA_CLIENT_ID>",
#     client_secret: "<OKTA_CLIENT_SECRET>",
#     redirect_uri: "https://firezone.example.com/auth/oidc/okta/callback/",
#     response_type: "code",
#     scope: "openid email profile offline_access",
#     label: "Okta"
#   }
# }
default['firezone']['authentication']['oidc'] = {{ config.authentication.oidc|tojson }}

# ## Custom Reverse Proxy
#
# An array of IPs that Firezone will trust as reverse proxies.
#
# Read more here:
# https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Forwarded-For#selecting_an_ip_address
#
# By default the following IPs are included:
# * IPv4: 127.0.0.0/8, 10.0.0.0/8, 172.16.0.0/12, 192.168.0.0/16
# * IPv6: ::1/128, fc00::/7
#
# If any client requests will actually be coming from these private IPs, add them to
# default['firezone']['phoenix']['private_clients'] below instead of here.
#
# If set to false Firezone will assume that it is not running behind a proxy
default['firezone']['phoenix']['external_trusted_proxies'] = {{ config.phoenix.external_trusted_proxies|tojson }}

# An array of IPs that Firezone will assume are clients, and thus, not a trusted
# proxy for the purpose of determining the client's IP. By default the bundled
# See more here: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Forwarded-For#selecting_an_ip_address
# This will supersede any proxy configured manually or by default by
# default['firezone']['external_trusted_proxies']
default['firezone']['phoenix']['private_clients'] = {{ config.phoenix.private_clients|tojson }}

# ## Nginx

# These attributes control Firezone-specific portions of the Nginx
# configuration and the virtual host for the Firezone Phoenix app.
default['firezone']['nginx']['enabled'] = {{ config.nginx.enabled|tojson }}
default['firezone']['nginx']['ssl_port'] = {{ config.nginx.ssl_port }}
default['firezone']['nginx']['directory'] = "{{ config.nginx.directory }}"
default['firezone']['nginx']['log_directory'] = "{{ config.nginx.log_directory }}"
default['firezone']['nginx']['log_rotation']['file_maxbytes'] = {{ config.nginx.log_rotation.file_maxbytes }}
default['firezone']['nginx']['log_rotation']['num_to_keep'] = {{ config.nginx.log_rotation.num_to_keep }}
default['firezone']['nginx']['log_x_forwarded_for'] = {{ config.nginx.log_x_forwarded_for|tojson }}

# HSTS Header settings
default['firezone']['nginx']['hsts_header']['enabled'] = {{ config.nginx.hsts_header.enabled|tojson }}
default['firezone']['nginx']['hsts_header']['include_subdomains'] = {{ config.nginx.hsts_header.include_subdomains|tojson }}
default['firezone']['nginx']['hsts_header']['max_age'] = {{ config.nginx.hsts_header.max_age }}

# Permit nginx to listen for IPv6 connections in addition to IPv4
default['firezone']['nginx']['ipv6'] = {{ config.nginx.ipv6|tojson }}

# Redirect to the FQDN
default['firezone']['nginx']['redirect_to_canonical'] = {{ config.nginx.redirect_to_canonical|tojson }}

# Controls nginx caching, used to cache some endpoints
default['firezone']['nginx']['cache']['enabled'] = {{ config.nginx.cache.enabled|tojson }}
default['firezone']['nginx']['cache']['directory'] = "{{ config.nginx.cache.directory }}"

# These attributes control the main nginx.conf, including the events and http
# contexts.
#
# These will be copied to the top-level nginx namespace and used in a
# template from the community nginx cookbook
# (https://github.com/miketheman/nginx/blob/master/templates/default/nginx.conf.erb)
default['firezone']['nginx']['user'] = {{ config.nginx.user }}
default['firezone']['nginx']['group'] = {{ config.nginx.group }}
default['firezone']['nginx']['dir'] = {{ config.nginx.dir }}
default['firezone']['nginx']['log_dir'] = {{ config.nginx.log_dir }}
default['firezone']['nginx']['pid'] = "{{ config.nginx.pid }}"
default['firezone']['nginx']['daemon_disable'] = {{ config.nginx.daemon_disable|tojson }}
default['firezone']['nginx']['gzip'] = '{{ config.nginx.gzip }}'
default['firezone']['nginx']['gzip_static'] = 'off'
default['firezone']['nginx']['gzip_http_version'] = '1.0'
default['firezone']['nginx']['gzip_comp_level'] = '2'
default['firezone']['nginx']['gzip_proxied'] = 'any'
default['firezone']['nginx']['gzip_vary'] = 'off'
default['firezone']['nginx']['gzip_buffers'] = nil
default['firezone']['nginx']['gzip_types'] = %w[
  text/plain
  text/css
  application/x-javascript
  text/xml
  application/xml
  application/rss+xml
  application/atom+xml
  text/javascript
  application/javascript
  application/json
]
default['firezone']['nginx']['gzip_min_length'] = 1000
default['firezone']['nginx']['gzip_disable'] = 'MSIE [1-6]\.'
default['firezone']['nginx']['keepalive'] = '{{ config.nginx.keepalive }}'
default['firezone']['nginx']['keepalive_timeout'] = {{ config.nginx.keepalive_timeout }}
default['firezone']['nginx']['worker_processes'] = {{ config.nginx.worker_processes }} # node['cpu'] && node['cpu']['total'] ? node['cpu']['total'] : 1
default['firezone']['nginx']['worker_connections'] = {{ config.nginx.worker_connections }}
default['firezone']['nginx']['worker_rlimit_nofile'] = nil
default['firezone']['nginx']['multi_accept'] = true
default['firezone']['nginx']['event'] = 'epoll'
default['firezone']['nginx']['server_tokens'] = nil
default['firezone']['nginx']['server_names_hash_bucket_size'] = 64
default['firezone']['nginx']['sendfile'] = 'on'
default['firezone']['nginx']['access_log_options'] = nil
default['firezone']['nginx']['error_log_options'] = nil
default['firezone']['nginx']['disable_access_log'] = false
default['firezone']['nginx']['types_hash_max_size'] = 2048
default['firezone']['nginx']['types_hash_bucket_size'] = 64
default['firezone']['nginx']['proxy_read_timeout'] = nil
default['firezone']['nginx']['client_body_buffer_size'] = nil
default['firezone']['nginx']['client_max_body_size'] = '{{ config.nginx.client_max_body_size }}'
default['firezone']['nginx']['default']['modules'] = []

# Nginx rate limiting configuration.
# Note that requests are also rate limited by the upstream Phoenix application.
default['firezone']['nginx']['enable_rate_limiting'] = {{ config.nginx.enable_rate_limiting|tojson }}
default['firezone']['nginx']['rate_limiting_zone_name'] = 'firezone'
default['firezone']['nginx']['rate_limiting_backoff'] = '{{ config.nginx.rate_limiting_backoff }}'
default['firezone']['nginx']['rate_limit'] = '{{ config.nginx.rate_limit }}'

# ## Postgres

# ### Use the bundled Postgres instance (default, recommended):
#

default['firezone']['postgresql']['enabled'] = {{ config.postgresql.enabled|tojson }}
default['firezone']['postgresql']['username'] = node['firezone']['user']
default['firezone']['postgresql']['data_directory'] = "#{node['firezone']['var_directory']}/postgresql/13.3/data"

# ### Using an external Postgres database
#
# Disable the provided Postgres instance and connect to your own:
#
# default['firezone']['postgresql']['enabled'] = false
# default['firezone']['database']['user'] = 'my_db_user_name'
# default['firezone']['database']['name'] = 'my_db_name''
# default['firezone']['database']['host'] = 'my.db.server.address'
# default['firezone']['database']['port'] = 5432
#
# Further database configuration options can be found below

# ### Logs
default['firezone']['postgresql']['log_directory'] = "#{node['firezone']['log_directory']}/postgresql"
default['firezone']['postgresql']['log_rotation']['file_maxbytes'] = {{ config.postgresql.log_rotation.file_maxbytes }}
default['firezone']['postgresql']['log_rotation']['num_to_keep'] = {{ config.postgresql.log_rotation.num_to_keep }}

# ### Postgres Settings
default['firezone']['postgresql']['checkpoint_completion_target'] = {{ config.postgresql.checkpoint_completion_target }}
default['firezone']['postgresql']['checkpoint_segments'] = {{ config.postgresql.checkpoint_segments }}
default['firezone']['postgresql']['checkpoint_timeout'] = '{{ config.postgresql.checkpoint_timeout }}'
default['firezone']['postgresql']['checkpoint_warning'] = '{{ config.postgresql.checkpoint_warning }}'
default['firezone']['postgresql']['effective_cache_size'] = '{{ config.postgresql.effective_cache_size }}'
default['firezone']['postgresql']['listen_address'] = '{{ config.postgresql.listen_address }}'
default['firezone']['postgresql']['max_connections'] = {{ config.postgresql.max_connections }}
default['firezone']['postgresql']['md5_auth_cidr_addresses'] = {{ config.postgresql.md5_auth_cidr_addressses|tojson }}
default['firezone']['postgresql']['port'] = {{ config.postgresql.port }}
default['firezone']['postgresql']['shared_buffers'] = "#{(node['memory']['total'].to_i / 4) / 1024}MB"
default['firezone']['postgresql']['shmmax'] = {{ config.postgresql.shmmax }}
default['firezone']['postgresql']['shmall'] = {{ config.postgresql.shmall }}
default['firezone']['postgresql']['work_mem'] = '{{ config.postgresql.work_mem }}'

# ## Common Database Settings
#
# The settings below configure how Firezone connects to and uses your database.
# At this time only Postgres (and Postgres-compatible) databases are supported.
default['firezone']['database']['user'] = node['firezone']['postgresql']['username']
default['firezone']['database']['name'] = 'firezone'
default['firezone']['database']['host'] = node['firezone']['postgresql']['listen_address']
default['firezone']['database']['port'] = node['firezone']['postgresql']['port']
default['firezone']['database']['ssl'] = false

# SSL opts to pass to Erlang's SSL module. See a full listing at https://www.erlang.org/doc/man/ssl.html
# Firezone supports the following subset:
# {
#   verify: :verify_peer, # or :verify_none
#   cacerts: "...",       # The DER-encoded trusted certificates. Overrides :cacertfile if specified.
#   cacertfile: "/path/to/cert.pem", # Path to a file containing PEM-encoded CA certificates.
#   versions: ["tlsv1.1", "tlsv1.2", "tlsv1.3"], # Array of TLS versions to enable
# }
default['firezone']['database']['ssl_opts'] = {}

# DB Connection Parameters to pass to the Postgrex driver. If you're unsure, leave this blank.
default['firezone']['database']['parameters'] = {}

default['firezone']['database']['pool'] = [10, Etc.nprocessors].max
default['firezone']['database']['extensions'] = { 'plpgsql' => true, 'pg_trgm' => true }

# Create the DB user. Set this to false if the user already exists.
default['firezone']['database']['create_user'] = true

# Create the DB. Set this to false if the database already exists.
default['firezone']['database']['create_db'] = true

# Uncomment to specify a database password. Not usually needed if using the bundled Postgresql.
# default['firezone']['database']['password'] = 'change_me'

# ## Phoenix

# ### The Phoenix web app for Firezone
default['firezone']['phoenix']['enabled'] = {{ config.phoenix.enabled|tojson }}
default['firezone']['phoenix']['listen_address'] = '{{ config.phoenix.listen_address }}'
default['firezone']['phoenix']['port'] = {{ config.phoenix.port }}
default['firezone']['phoenix']['log_directory'] = "#{node['firezone']['log_directory']}/phoenix"
default['firezone']['phoenix']['log_rotation']['file_maxbytes'] = {{ config.phoenix.log_rotation.file_maxbytes }}
default['firezone']['phoenix']['log_rotation']['num_to_keep'] = {{ config.phoenix.log_rotation.num_to_keep }}

# Toggle bringing down the web app for Firezone if a crash loop is detected.
# When set to true, the web app will be brought down after 5 crashes.
# When set to false, this will allow the web app to crash indefinitely.
default['firezone']['phoenix']['crash_detection']['enabled'] = true

# ## WireGuard

# ### Interface Management
# Enable management of the WireGuard interface itself. Set this to false if you
# want to manually create your WireGuard interface and manage its interface properties.
default['firezone']['wireguard']['enabled'] = {{ config.wireguard.enabled|tojson }}
default['firezone']['wireguard']['log_directory'] = "#{node['firezone']['log_directory']}/wireguard"
default['firezone']['wireguard']['log_rotation']['file_maxbytes'] = {{ config.wireguard.log_rotation.file_maxbytes }}
default['firezone']['wireguard']['log_rotation']['num_to_keep'] = {{ config.wireguard.log_rotation.num_to_keep }}

# The WireGuard interface name Firezone will apply configuration settings to.
default['firezone']['wireguard']['interface_name'] = '{{ config.wireguard.interface_name }}'

# WireGuard listen port
default['firezone']['wireguard']['port'] = {{ config.wireguard.port }}

# WireGuard interface MTU
default['firezone']['wireguard']['mtu'] = {{ config.wireguard.mtu }}

# WireGuard endpoint
# By default, the public IP address of this server is used as the Endpoint
# field for generating Device configs. Override this if you wish to change.
default['firezone']['wireguard']['endpoint'] = {% if config.wireguard.endpoint != "nil" %}'{{ config.wireguard.endpoint }}'{% else %}nil{% endif %}

# Default AllowedIPs to use for generated device configs specified as a comma-separated
# list of IPv4 / IPv6 CIDRs.
# Default is to tunnel all IPv4 and IPv6 traffic with '0.0.0.0/0, ::/0'
default['firezone']['wireguard']['allowed_ips'] = '{{ config.wireguard.allowed_ips }}'

# Default DNS servers to use for generated device configs.
# Defaults to CloudFlare's public DNS. Set to nil to omit DNS from generated
# device configurations.
default['firezone']['wireguard']['dns'] = '{{ config.wireguard.dns }}'

# Default PersistentKeepalive setting to use for generated device configs.
# See https://www.wireguard.com/quickstart/#nat-and-firewall-traversal-persistence
# Set to 0 or nil to disable. Default 0.
default['firezone']['wireguard']['persistent_keepalive'] = {{ config.wireguard.persistent_keepalive }}

# Enable or disable IPv4 connectivity in your WireGuard network. Default enabled.
default['firezone']['wireguard']['ipv4']['enabled'] = {{ config.wireguard.ipv4.enabled|tojson }}

# Enable or disable SNAT/Masquerade for packets leaving the WireGuard ipv4 tunnel. Default true.
default['firezone']['wireguard']['ipv4']['masquerade'] = {{ config.wireguard.ipv4.masquerade|tojson }}

# The CIDR-formatted IPv4 network to use for your WireGuard network. Default 10.3.2.0/24.
default['firezone']['wireguard']['ipv4']['network'] = '{{ config.wireguard.ipv4.network }}'

# The IPv4 address to assign to your WireGuard interface. Must be an address
# contained within the WireGuard network specific above. Default 10.3.2.1.
default['firezone']['wireguard']['ipv4']['address'] = '{{ config.wireguard.ipv4.address }}'

# Enable or disable IPv6 connectivity in your WireGuard network. Default enabled.
default['firezone']['wireguard']['ipv6']['enabled'] = {{ config.wireguard.ipv6.enabled|tojson }}

# Enable or disable SNAT/Masquerade for packets leaving the WireGuard ipv6 tunnel. Default true.
default['firezone']['wireguard']['ipv6']['masquerade'] = {{ config.wireguard.ipv6.masquerade|tojson }}

# The CIDR-formatted IPv6 network to use for your WireGuard network. Default fd00::3:2:0/120.
default['firezone']['wireguard']['ipv6']['network'] = '{{ config.wireguard.ipv6.network}}'

# The IPv6 address to assign to your WireGuard interface. Must be an address
# contained within the WireGuard network specific above. Default fd00::3:2:1.
default['firezone']['wireguard']['ipv6']['address'] = '{{ config.wireguard.ipv6.address }}'

# ## Runit

# This is missing from the enterprise cookbook
# see (https://github.com/chef-cookbooks/enterprise-chef-common/pull/17)
#
# Will be copied to the root node.runit namespace.
default['firezone']['runit']['svlogd_bin'] = "#{node['firezone']['install_directory']}/embedded/bin/svlogd"

# ## SSL

default['firezone']['ssl']['directory'] = '{{ config.ssl.directory }}'

# Email to use for self signed certs and ACME cert issuance and renewal notices.
# Defaults to default['firezone']['admin_email'] if nil.
default['firezone']['ssl']['email_address'] = {% if config.ssl.email_address != "nil" %}'{{ config.ssl.email_address }}'{% else %}nil{% endif %}

# Enable / disable ACME protocol support to auto-provision SSL certificates.
# Before turning this on, please ensure:
# 1. default['firezone']['external_url'] includes a valid FQDN
# 2. Port 80/tcp is accessible; this is used for domain validation.
# 3. default['firezone']['ssl']['email_address'] is set properly. This will be used for renewal notices.
default['firezone']['ssl']['acme']['enabled'] = {{ config.ssl.acme.enabled|tojson }}

# Set the ACME server directory for ACME protocol SSL certificate issuance
# This option requires default['firezone']['ssl']['acme']['enabled']
# You can either set one of the CA short names as explained here (https://github.com/acmesh-official/acme.sh/wiki/Server)
# or the directory URL.
# In case ACME is enabled this option will default to letsencrypt
default['firezone']['ssl']['acme']['server'] = '{{ config.ssl.acme.server }}'
# Specify the key type and length for the cert. See more at https://github.com/acmesh-official/acme.sh#10-issue-ecc-certificates
# Allowed values are:
# * RSA: 2048, 3072, 4096, 8192
# * ECDSA(recommended): ec-256, ec-384, ec-521
default['firezone']['ssl']['acme']['keylength'] = '{{ config.ssl.acme.keylength }}'


# Paths to the SSL certificate and key files. If these are set, ACME is automatically disabled.
# If these are nil and ACME is disabled, we will attempt to generate a self-signed certificate and use that instead.
default['firezone']['ssl']['certificate'] = {% if config.ssl.certificate != "nil" %}'{{ config.ssl.certificate }}'{% else %}nil{% endif %}
default['firezone']['ssl']['certificate_key'] = {% if config.ssl.certificate_key != "nil" %}'{{ config.ssl.certificate_key }}'{% else %}nil{% endif %}

# Path to the SSL dhparam file if you want to specify your own SSL DH parameters.
default['firezone']['ssl']['ssl_dhparam'] = {% if config.ssl.ssl_dhparam != "nil" %}'{{ config.ssl.ssl_dhparam}}'{% else %}nil{% endif %}

# These are used in creating a self-signed cert if you haven't brought your own.
default['firezone']['ssl']['country_name'] = '{{ config.ssl.country_name }}'
default['firezone']['ssl']['state_name'] = '{{ config.ssl.state_name }}'
default['firezone']['ssl']['locality_name'] = '{{ config.ssl.locality_name }}'
default['firezone']['ssl']['company_name'] = '{{ config.ssl.company_name }}'
default['firezone']['ssl']['organizational_unit_name'] = '{{ config.ssl.organizational_unit_name }}'

# ### Cipher settings
#
# Based off of the Mozilla recommended cipher suite
# https://wiki.mozilla.org/Security/Server_Side_TLS#Recommended_Ciphersuite
#
# SSLV3 was removed because of the poodle attack. (https://www.openssl.org/~bodo/ssl-poodle.pdf)
#
# If your infrastructure still has requirements for the vulnerable/venerable SSLV3, you can add
# "SSLv3" to the below line.
default['firezone']['ssl']['ciphers'] = '{{ config.ssl.ciphers }}'
default['firezone']['ssl']['fips_ciphers'] = '{{ config.ssl.fips_ciphers }}'
default['firezone']['ssl']['protocols'] = '{{ config.ssl.protocols }}'
default['firezone']['ssl']['session_cache'] = '{{ config.ssl.session_cache }}'
default['firezone']['ssl']['session_timeout'] = '{{ config.ssl.session_timeout }}'

# ### robots.txt Settings
#
# These control the "Allow" and "Disallow" paths in /robots.txt. See
# http://www.robotstxt.org/robotstxt.html for more information. Only a single
# line for each item is supported. If a value is nil, the line will not be
# present in the file.
default['firezone']['robots_allow'] = {% if config.robots_allow != "nil" %}'{{ config.robots_allow }}'{% else %}nil{% endif %}
default['firezone']['robots_disallow'] = {% if config.robots_disallow != "nil" %}'{{ config.robots_disallow }}'{% else %}nil{% endif %}

# ### Outbound Email Settings
# If from_email not set, the outbound email feature will be disabled (default)
default['firezone']['outbound_email']['from'] = {% if config.outbound_email.from != "nil" %}'{{ config.outbound_email.from }}'{% else %}nil{% endif %}

# If provider not set, the :sendmail delivery method will be used. Using
# the sendmail delivery method requires that a working mail transfer agent
# (usually set up with a relay host) be configured on this machine.
default['firezone']['outbound_email']['provider'] = {% if config.outbound_email.provider != "nil" %}'{{ config.outbound_email.provider }}'{% else %}nil{% endif %}

# Configure one or more providers below.
# See the Swoosh library documentation for more information on configuring adapters:
# https://github.com/swoosh/swoosh#adapters
default['firezone']['outbound_email']['configs'] = {{ config.outbound_email.configs|tojson(indent=2)|regex_replace('"(.*?)":', '\\1:')|regex_replace('"nil"', 'nil') }}

# ## Telemetry
#
# Firezone relies heavily on hashed, anonymized telemetry data to help us build
# a better product for our users. This data is stored securely and is not
# shared or accessible to any third parties. Set this to false to disable.
default['firezone']['telemetry']['enabled'] = true

# ## Diagnostics Settings

# ### Connectivity Checks
#
# By default, Firezone periodically checks for WAN connectivity to the Internet
# by issuing a POST request with an empty body to https://ping.firez.one. This
# is used to determine the server's publicly routable IP address for populating
# device configurations and setting up firewall rules. Set this to false to
# disable.
default['firezone']['connectivity_checks']['enabled'] = true

# Amount of time to sleep between connectivity checks, in seconds.
# Default: 3600 (1 hour). Minimum: 60 (1 minute). Maximum: 86400 (1 day).
default['firezone']['connectivity_checks']['interval'] = 3_600

# ## Cookies settings

# Enable or disable the secure attributes for Firezone cookies. It's highly
# recommended you leave this enabled unless you know what you're doing.
default['firezone']['phoenix']['secure_cookies'] = true
